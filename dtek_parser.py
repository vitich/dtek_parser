#!/usr/bin/env python3

from telethon import TelegramClient, events
import asyncio
import re
import json
import os

# –í–≤–µ–¥—ñ—Ç—å —Ç—É—Ç –≤–∞—à—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
api_id = os.getenv('API_ID')
api_hash = os.getenv('API_HASH')
phone_number = os.getenv('PHONE_NUMBER')
source_channel_username = os.getenv('SOURCE_CHANNEL_USERNAME')
destination_chat_id = int(os.getenv('DESTINATION_CHAT_ID'))

# –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ç–µ—Ä–Ω–∏ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
text_pattern_str = os.getenv('TEXT_PATTERN')
time_pattern_str = os.getenv('TIME_PATTERN')

# –ü–∞—Ç–µ—Ä–Ω –¥–ª—è –ø–æ—à—É–∫—É
text_pattern = re.compile(text_pattern_str, re.IGNORECASE)  # –Ü–≥–Ω–æ—Ä—É—î —Ä–µ–≥—ñ—Å—Ç—Ä
time_pattern = re.compile(time_pattern_str)  # –î–ª—è –ø–æ—à—É–∫—É —á–∞—Å—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –ß–ß:–ú–ú

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞
session_name = '/app/session/session_name'
client = TelegramClient(session_name, api_id, api_hash)

# –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
last_message_file = '/app/session/last_message.json'

def load_last_message():
    if os.path.exists(last_message_file):
        with open(last_message_file, 'r') as f:
            return json.load(f)
    return {'message_id': None}

def save_last_message(message_id):
    with open(last_message_file, 'w') as f:
        json.dump({'message_id': message_id}, f)

def extract_relevant_lines(message_text):
    lines = message_text.split('\n')
    relevant_lines = []
    last_time = None

    for line in lines:
        cleaned_line = line.strip()
        if time_pattern.search(cleaned_line):
            last_time = time_pattern.search(cleaned_line).group()
        
        if text_pattern.search(cleaned_line):
            if last_time:
                relevant_lines.append(f"üí° –û {last_time}\n{cleaned_line}")
            else:
                relevant_lines.append(f"{cleaned_line}")

    return relevant_lines

async def check_for_new_messages():
    try:
        async with client:
            source_channel = await client.get_entity(source_channel_username)
            last_message = load_last_message()

            async for message in client.iter_messages(source_channel, limit=1):
                if last_message and message.id == last_message['message_id']:
                    print(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ id {message.id} –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.")
                    break

                print(f"–û–±—Ä–æ–±–ª—è—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ id {message.id}.")
                print(f"–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message.text}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                relevant_lines = extract_relevant_lines(message.text)
                if relevant_lines:
                    for line in relevant_lines:
                        print(f"–ù–∞–¥—Å–∏–ª–∞—é: {line}")
                        await client.send_message(destination_chat_id, line)
                    save_last_message(message.id)  # –û–Ω–æ–≤–ª—é—î–º–æ ID –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                else:
                    print("–í—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        print(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

# –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
async def main():
    while True:
        await check_for_new_messages()
        await asyncio.sleep(60)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –≤ 60 —Å–µ–∫—É–Ω–¥

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Å—ñ—é –∞–±–æ –∞–≤—Ç–æ—Ä–∏–∑—É—î–º–æ—Å—è, —è–∫—â–æ —Å–µ—Å—ñ—ó –Ω–µ —ñ—Å–Ω—É—î
    with client:
        client.start(phone=lambda: phone_number)
        client.loop.run_until_complete(main())
